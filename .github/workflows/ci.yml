name: CI Workflow

on:
  push:
    branches:
      - develop

jobs:
  test-memory:
    runs-on: [self-hosted]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Find and test JPEG files
        run: |
          # Remplacer les fichiers corrompus
          for file in $(find . -name "*.jpg"); do
            if ! file "$file" | grep -q "JPEG image data"; then
              echo "File $file is corrupted. Replacing it."
              cp /Users/clementcoiffierabeille/memory/imgBackup "$file"  # Chemin vers un JPEG de remplacement
            fi
          done

  build-memory:
    runs-on: [self-hosted]
    needs: test-memory
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/memory .

  push-memory:
    needs: build-memory
    runs-on: [self-hosted]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/memory

  deploy-memory:
    needs: push-memory
    runs-on: [self-hosted]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Connexion SSH
        run: |
          echo "${{ secrets.SSH_PASSWORD }}" | ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@127.0.0.1 << EOF
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker pull ${{ secrets.DOCKER_USERNAME }}/memory:latest
            docker stop nginx-memory || true
            docker rm nginx-memory || true
            docker run --name nginx-memory -p 80:80 -d ${{ secrets.DOCKER_USERNAME }}/memory
          EOF

